Kafka Rebalancing

**Rebalancing** in Apache Kafka is the process of 
    **redistributing partition assignments among consumer group members** when the group changes.

---

## üîÑ What Triggers Rebalancing?

A **consumer group** rebalances when:
    1. A **new consumer joins** the group.
    2. An **existing consumer leaves** or crashes.
    3. **Topic partitions** change (e.g., a new partition is added).
    4. Kafka **coordinator detects a heartbeat timeout**.

---

## üîÅ What Happens During Rebalancing?
    1. Kafka **revokes partition assignments** from all consumers.
    2. The **group coordinator** recalculates new assignments.
    3. Partitions are **redistributed among available consumers**.
    4. Consumers are notified of their **new assignments** and begin consuming.

> ‚ö†Ô∏è During rebalancing, **no messages are consumed**‚Äîthis causes a **pause** in processing.

---

### üë• Example

**Before rebalance:**

| Partition | Consumer |
| --------- | -------- |
| 0         | C1       |
| 1         | C2       |

**C2 crashes ‚Üí rebalance happens**

**After rebalance:**

| Partition | Consumer |
| --------- | -------- |
| 0         | C1       |
| 1         | C1       |

---

## üß† Why Is Rebalancing Important?

* Ensures **load balancing** across consumers.
* Maintains **fault tolerance**‚Äîreassigns partitions if a consumer dies.
* Supports **elastic scaling**‚Äînew consumers can join at runtime.

---

## ‚öôÔ∏è How to Optimize Rebalancing

| Technique                                                   | Description                                                            |
| ----------------------------------------------------------- | ---------------------------------------------------------------------- |
| `session.timeout.ms`                                        | Tune to control how fast Kafka detects dead consumers.                 |
| `heartbeat.interval.ms`                                     | Keep small to detect failures quickly, but avoid too frequent.         |
| `max.poll.interval.ms`                                      | Increase this for slow-processing consumers to avoid being kicked out. |
| **Cooperative Rebalancing**                                 | Reduces downtime by avoiding full revocation. Enabled via:             |
| `partition.assignment.strategy = CooperativeStickyAssignor` |                                                                        |

---

## üîß Types of Assignors

Kafka uses a **partition assignment strategy** to decide which consumer gets what:

| Strategy                    | Behavior                                                      |
| --------------------------- | ------------------------------------------------------------- |
| `RangeAssignor`             | Assigns consecutive partitions.                               |
| `RoundRobinAssignor`        | Distributes partitions evenly.                                |
| `StickyAssignor`            | Tries to **minimize movement**.                               |
| `CooperativeStickyAssignor` | Minimizes disruption + supports **incremental rebalancing** ‚úÖ |

---

## üìå Summary

* **Rebalancing** ensures each partition has a consumer.
* It‚Äôs **automatic** but causes **temporary disruption**.
* Use **cooperative assignment** to minimize downtime.

---

Would you like a diagram showing how rebalancing works step-by-step?
