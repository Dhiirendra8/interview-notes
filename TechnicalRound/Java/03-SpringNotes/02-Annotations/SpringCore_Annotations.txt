org.springframework.beans.factory.annotation
org.springframework.context.annotation

Dependency Injection Related Annotations

1. @Autowired : 
		- mark a dependency which Spring is going to resolve and inject.
		- can use this annotation with a constructor, setter, or field injection.	

2. @Bean :
		- marks a factory method which instantiates a Spring bean
		- Spring calls these methods when a new instance of the return type is required.
		
3. @Qualifier :
		- @Qualifier along with @Autowired to provide the bean id or bean name
		- to use in ambiguous situations.
		
4. @Required : 
		- @Required on setter methods to mark dependencies that we want to populate through XML:
		
5. @Value : 
		- We can use @Value for injecting property values into beans.
		- It's compatible with constructor, setter, and field injection.
		
6. @DependsOn : 
		- Spring initialize other beans before the annotated one
		- @DependsOn("engine")
		  class Car implements Vehicle {}
		  
7. @Lazy :
		- we need to create a bean when we request it, not at application startup.
		
8. @Primary : 
		- Sometimes we need to define multiple beans of the same type. In these cases, the injection will be unsuccessful 
				because Spring has no clue which bean we need.
		- We already saw an option to deal with this scenario: marking all the wiring points with @Qualifier and specify the name of the required bean.
		
9. @Scope :
		- to define the scope of a @Component class or a @Bean definition
		- singleton, prototype, request, session, globalSession
		
10. @Configuration: 
		- Used to indicate that a class declares one or more @Bean methods. 
		- These classes are processed by the Spring container to generate bean definitions and service requests for those beans at runtime.
	
		
Context Configuration Annotations

1. @Profile :
		- use a @Component class or a @Bean method only when a specific profile is active, 

2. @Import :
		- We can use specific @Configuration classes without component scanning with this annotation. 
		- We can provide those classes with @Import's value argument:

3. @ImportResource : 
		- We can import XML configurations with this annotation. 
		- We can specify the XML file locations with the locations argument, or with its alias, the value argument:
			@Configuration
			@ImportResource("classpath:/annotations.xml")
			class VehicleFactoryConfig {}

4. @PropertySource :
		- define property files for application settings:

5. @PropertySources : 
		- We can use this annotation to specify multiple @PropertySource configurations: