# OAuth 2
OAuth 2.0 is an open standard authorization framework that enables secure and delegated access to resources on behalf of a user or application. 
It provides a standardized way for users to grant limited access to their protected resources (such as data or APIs) to another application without sharing their credentials directly.

The OAuth 2.0 framework involves multiple parties: the resource owner (user), the client (application), the 'authorization server', and 
the 'resource server'. Here's a high-level overview of how OAuth 2.0 works:

1. User initiates the authorization process: 
    The user wants to grant access to their resources to a specific client application. 
    The client application typically redirects the user to the 'authorization server' to initiate the process.

2. User grants authorization: 
    The 'authorization server' authenticates the user and asks for their consent to grant access to the client application. 
    This typically involves displaying the requested permissions or scopes that the client application needs. 
    If the user consents, they are redirected back to the client application.

3. Client application obtains an access token: 
    The client application makes a request to the 'authorization server', providing its credentials and 
        the 'authorization code' received from the previous step. 
    If the credentials and code are valid, the 'authorization server' responds with an access token.

4. Client application accesses protected resources: 
    The client application uses the obtained access token to make requests to the 'resource server' (API server) on behalf of the user. 
    The 'resource server' validates the access token and grants access to the requested resources if the token is valid and authorized.

OAuth 2.0 introduces several grant types that define how the client application obtains the access token, 
such as the 'authorization code' grant, implicit grant, client credentials grant, and others. 
The appropriate grant type depends on factors such as the type of client application (web app, mobile app, server-to-server communication) and 
    the level of trust between the parties.

OAuth 2.0 is widely adopted and used by many popular platforms and services, including social media platforms, APIs, and cloud providers. 
It provides a secure and standardized way to enable third-party applications to access protected resources without compromising user credentials.

It's important to note that OAuth 2.0 is an authorization framework, not an authentication protocol. 
It is commonly used alongside an authentication mechanism, such as OpenID Connect, which provides user authentication in addition to authorization.

Overall, OAuth 2.0 simplifies the process of granting and managing access to resources in a secure and controlled manner, 
    promoting interoperability and facilitating integration between applications.

=================================================
Bilkul! Chaliye **OAuth 2.0** ko simple aur aasan shabdon mein samajhte hain:

---

## 🛡️ OAuth 2.0 Kya Hai?

**OAuth 2.0** ek **authorization framework** hai jo allow karta hai ek app ko doosri app ke resources ko access karne ke liye — **bina user ke password ko share kiye**.

---

## 🔑 Real-life Example:

Sochiye aap ek mobile app (jaise "MyApp") use kar rahe ho jisme aap chahte ho ki wo aapke **Google account** se login kare aur aapke contacts padh sake.

👉 Aap **MyApp ko Google pe trust** dete ho ki wo **sirf contacts access** kare — par aapka **Google password MyApp ko nahi dete**.

Yeh hi kaam **OAuth 2.0** karta hai.

---

## 🧩 OAuth 2.0 Ke Key Players:

| Role                     | Explanation                                      |
| ------------------------ | ------------------------------------------------ |
| **Resource Owner**       | User (jiske data ka access chahiye)              |
| **Client**               | App jo access maang rahi hai (e.g. MyApp)        |
| **Resource Server**      | Jahan data pada hai (e.g. Google Contacts)       |
| **Authorization Server** | Login/auth ka kaam karta hai (e.g. Google Login) |

---

## 🔄 Basic Flow (Step-by-step):

1. **User opens MyApp**
2. **MyApp** bolta hai: “Mujhe aapke Google contacts chahiye”
3. User redirect hota hai **Google ke login page par**
4. User Google login karta hai aur permission deta hai
5. Google **MyApp ko ek token** deta hai
6. **MyApp** Google ke resource server se token ke basis par **contacts access** karta hai

---

## 🪙 Token Kya Hai?

OAuth 2.0 me **access token** ek secure string hoti hai jo app ko user ke behalf pe data access karne deti hai — bina password ke.

---

## 🔐 Why Use OAuth 2.0?

✅ Secure — Password share nahi karna padta
✅ Controlled Access — App ko sirf limited permission milti hai
✅ Token-based — Easily expire ya revoke ho sakta hai
✅ Widely used — Google, Facebook, GitHub, etc.

---

## 🧪 Common Use Cases:

* “Login with Google” or “Login with GitHub”
* 3rd-party apps accessing your calendar, contacts, files, etc.
* Microservices communicating securely using **token-based auth**

---
==========================================================================================
Great! Let’s build a **Spring Boot OAuth2 example** using **“Login with Google”**.

---

## ✅ Goal:

Create a simple **Spring Boot** application where users can log in using their **Google account** (via OAuth2).

---

## 🔧 Step-by-Step Setup

### 🛠️ 1. Add Dependencies (`pom.xml`)

```xml
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-oauth2-client</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-web</artifactId>
</dependency>
<dependency>
  <groupId>org.springframework.boot</groupId>
  <artifactId>spring-boot-starter-security</artifactId>
</dependency>
```

---

### 📁 2. Configure `application.yml`

```yaml
spring:
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: YOUR_GOOGLE_CLIENT_ID
            client-secret: YOUR_GOOGLE_CLIENT_SECRET
            scope:
              - openid
              - profile
              - email
        provider:
          google:
            authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
```

📝 Replace `client-id` and `client-secret` with values from [Google Cloud Console](https://console.cloud.google.com/).

---

### 🔐 3. Create a Simple Controller

```java
@RestController
public class HomeController {

    @GetMapping("/")
    public String home() {
        return "Welcome to the app. <a href='/oauth2/authorization/google'>Login with Google</a>";
    }

    @GetMapping("/dashboard")
    public String dashboard(@AuthenticationPrincipal OAuth2User principal) {
        return "Hello, " + principal.getAttribute("name");
    }
}
```

---

### 🔐 4. Security Configuration (Optional)

```java
@Configuration
@EnableWebSecurity
public class SecurityConfig {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
          .authorizeHttpRequests(auth -> auth
              .requestMatchers("/").permitAll()
              .anyRequest().authenticated()
          )
          .oauth2Login(oauth -> oauth
              .defaultSuccessUrl("/dashboard", true)
          );
        return http.build();
    }
}
```

---

## 🎯 Result:

* Visit `http://localhost:8080/`
* Click “Login with Google”
* You will be redirected to Google login
* On success → redirected to `/dashboard` with your name displayed

---

============================================================================================





