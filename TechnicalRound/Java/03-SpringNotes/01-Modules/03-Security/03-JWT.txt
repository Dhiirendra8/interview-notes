# JWT - Json Web Token (reference - tutorialspoint)

-> is an open Internet standard (RFC 7519) for securely transmitting trusted information between parties in a compact way.
-> The tokens contain claims that are encoded as a JSON object and are digitally signed using a private secret or a public/private key pair. 
-> They are self-contained and verifiable as they are digitally signed. JWT's can be signed and/or encrypted. 
-> The signed tokens verify the integrity of the claims contained in the token, while the encrypted ones hide the claims from other parties.

-> JWT's can also be used for the exchange of information though they more commonly used for authorization as they offer a lot of advantages 
	over session management using in-memory random tokens. 
-> The biggest of them being the enabling the delegation of authentication logic to a third-party server like AuthO etc.

A JWT token is divided into 3 parts namely -> header, payload, and signature in the format of

	[Header].[Payload].[Signature]
	
1. Header
	> The Header of a JWT token contains the list cryptographic operations that are applied to the JWT. 
	> This can be the signing technique, metadata information about the content-type and so on. 
	> The header is presented as a JSON object which is encoded to a base64URL. An example of a valid JWT header would be

	{ "alg": "HS256", "typ": "JWT" }
	-> Here, “alg” gives us information about the type of algorithm used and “typ” gives us the type of the information.
	
2. Payload (claims)
	-> The payload part of JWT contains the actual data to be transferred using the token. 
	This part is also known as the “claims” part of the JWT token. 
	The claims can be of three types - registered, public and private.

	> The "registered claims" are the ones which are recommended but not mandatory claims 
		such as iss(issuer), sub(subject), aud(audience) and others.
		
	> "Public claims" are those that are defined by those using the JWTs.
		
	> "Private claims or custom claims" are user-defined claims created for the purpose of sharing the information between the concerned parties.
		
	Example of a payload object could be.			
		{ "sub": "12345", "name": "Johnny Hill", "admin": false }
	> The payload object, like the header object is base64Url encoded as well and this string forms the second part of the JWT.

3. Signature- 
	> The signature part of the JWT is used for the verification that the message wasn't changed along the way. 
	> If the tokens are signed with private key, it also verifies that the sender is who it says it is. 
	> It is created using the encoded header, encoded payload, a secret and the algorithm specified in the header. 
	
	An example of a signature would be.

HMACSHA256( base64UrlEncode(header) + "." + base64UrlEncode(payload), secret)

	
	
If we put the header, payload and signature we get a token as given below.

	eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6I
	kpvaG4gRG9lIiwiYWRtaW4iOmZhbHNlfQ.gWDlJdpCTIHVYKkJSfAVNUn0ZkAjMxskDDm-5Fhe
	WJ7xXgW8k5CllcGk4C9qPrfa1GdqfBrbX_1x1E39JY8BYLobAfAg1fs_Ky8Z7U1oCl6HL63yJq_
	wVNBHp49hWzg3-ERxkqiuTv0tIuDOasIdZ5FtBdtIP5LM9Oc1tsuMXQXCGR8GqGf1Hl2qv8MCyn
	NZJuVdJKO_L3WGBJouaTpK1u2SEleVFGI2HFvrX_jS2ySzDxoO9KjbydK0LNv_zOI7kWv-gAmA
	j-v0mHdJrLbxD7LcZJEGRScCSyITzo6Z59_jG_97oNLFgBKJbh12nvvPibHpUYWmZuHkoGvuy5RLUA

	Now, this token can be used in the Authorization header using the Bearer schema as.

	Authorization - Bearer <token>


	
-------------------------------------------------------------------------------------------------------------------------------------

1. dependencies : 
	- Spring Web
	- Spring Security
	- jwt dependency from io.jsonwebtoken
	- jaxb-api
	
2. configuration class that extends the WebSecurityConfigurerAdapter

3. classes and interface related to JWT operations, which will include.
	- Generating token
	- Validating token
	- Checking the signature
	- Verifying claims and permissions
	
4. JwtUserDetailsService class 
	-> will extend the UserDetailsService of Spring security and we will implement the loadUserByUsername() method

5. create classes for our Request and Response models
	- Request (username, password)
	- Response (token)

6. For authentication create a controller class

7. filter class 
	-> will be used to track our requests and detect if they contain the valid token in the header

8. create the JwtAutheticationEntryPoint class. 
	This class extends Spring's AuthenticationEntryPoint class 
	and rejects every unauthenticated request with an error code 401 sent back to the client.
	
	
-------------------------------------------------------------------------------------------------------------------------------------
Details
1. Dependencies
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>io.jsonwebtoken</groupId>
			<artifactId>jjwt</artifactId>
			<version>0.9.1</version>
		</dependency>

		<dependency>
			<groupId>javax.xml.bind</groupId>
			<artifactId>jaxb-api</artifactId>
		</dependency>
		
-------------------------------------------------------------------------------------------------------------------------------------		
2. Configuration Class

@Configuration
public class WebSecurityConfig extends WebSecurityConfigurerAdapter {
   @Autowired
   private JwtAuthenticationEntryPoint authenticationEntryPoint;
   @Autowired
   private UserDetailsService userDetailsService;
   @Autowired
   private JwtFilter filter;
   
   @Bean
   public PasswordEncoder passwordEncoder() {
      return new BCryptPasswordEncoder();
   }
   @Override
   protected void configure(AuthenticationManagerBuilder auth) throws Exception {
      auth.userDetailsService(userDetailsService).passwordEncoder(passwordEncoder());
   }
   
   @Bean
   @Override
   public AuthenticationManager authenticationManagerBean() throws
   Exception {
      return super.authenticationManagerBean();
   }
   @Override
   protected void configure(HttpSecurity http) throws Exception {
      http.csrf().disable()
      .authorizeRequests().antMatchers("/login").permitAll()
      .anyRequest().authenticated()
      .and()
      .exceptionHandling().authenticationEntryPoint(authenticationEntryPoint)
      .and()
      .sessionManagement().sessionCreationPolicy(SessionCreationPolicy.STATELESS);
      http.addFilterBefore(filter, UsernamePasswordAuthenticationFilter.class);
   }
}

-------------------------------------------------------------------------------------------------------------------------------------

3. JWT Operation Classes
@Component 
public class TokenManager implements Serializable {
   
   private static final long serialVersionUID = 7008375124389347049L; 
   public static final long TOKEN_VALIDITY = 10 * 60 * 60; 
   
   @Value("${secret}") 
   private String jwtSecret; 
   
   public String "generateJwtToken"(UserDetails userDetails) { 
      Map<String, Object> claims = new HashMap<>(); 
      return Jwts.builder().setClaims(claims).setSubject(userDetails.getUsername()) 
         .setIssuedAt(new Date(System.currentTimeMillis())) 
         .setExpiration(new Date(System.currentTimeMillis() + TOKEN_VALIDITY * 1000)) 
         .signWith(SignatureAlgorithm.HS512, jwtSecret).compact(); 
   } 
   public Boolean "validateJwtToken"(String token, UserDetails userDetails) { 
      String username = getUsernameFromToken(token); 
      Claims claims = Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody();
      Boolean isTokenExpired = claims.getExpiration().before(new Date()); 
      return (username.equals(userDetails.getUsername()) && !isTokenExpired); 
   } 
   public String "getUsernameFromToken"(String token) {
      final Claims claims = Jwts.parser().setSigningKey(jwtSecret).parseClaimsJws(token).getBody(); 
      return claims.getSubject(); 
   } 
}

-------------------------------------------------------------------------------------------------------------------------------------
4. JwtUserDetailsService class will extend the UserDetailsService
@Service
public class JwtUserDetailsService implements UserDetailsService { 
   @Override 
   public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
      if ("randomuser123".equals(username)) { 
         return new User("randomuser123", 
            "$2a$10$slYQmyNdGzTn7ZLBXBChFOC9f6kFjAqPhccnP6DxlWXx2lPk1C3G6", 
            new ArrayList<>()); 
      } else { 
         throw new UsernameNotFoundException("User not found with username: " + username); 
      } 
   } 
}


-------------------------------------------------------------------------------------------------------------------------------------
5. Request and Response model classes
	public class JwtRequestModel implements Serializable { 
	   
	   private static final long serialVersionUID = 2636936156391265891L; 
	   
	   private String username; 
	   private String password; 
	   
	   public JwtRequestModel() { 
	   } 
	   public JwtRequestModel(String username, String password) { 
		  super(); 
		  this.username = username; this.password = password; 
	   } 
	   //Getter-Setter
	}

	public class JwtResponseModel implements Serializable {
	   
	   private static final long serialVersionUID = 1L;
	   
	   private final String token;
	   
	   public JwtResponseModel(String token) {
		  this.token = token;
	   }
	   public String getToken() {
		  return token;
	   }
	}


-------------------------------------------------------------------------------------------------------------------------------------
6. For authentication create a controller class

	@RestController
	@CrossOrigin
	public class JwtController {
	   @Autowired
	   private JwtUserDetailsService userDetailsService;
	   @Autowired
	   private AuthenticationManager authenticationManager;
	   @Autowired
	   private TokenManager tokenManager;
	   @PostMapping("/login")
	   public ResponseEntity<> createToken(@RequestBody JwtRequestModel
	   request) throws Exception {
		  try {
			 authenticationManager.authenticate(
				new	UsernamePasswordAuthenticationToken(request.getUsername(),
				request.getPassword())
			 );
		  } catch (DisabledException e) {
			 throw new Exception("USER_DISABLED", e);
		  } catch (BadCredentialsException e) {
			 throw new Exception("INVALID_CREDENTIALS", e);
		  }
		  final UserDetails userDetails = userDetailsService.loadUserByUsername(request.getUsername());
		  final String jwtToken = tokenManager.generateJwtToken(userDetails);
		  return ResponseEntity.ok(new JwtResponseModel(jwtToken));
	   }
	}


-------------------------------------------------------------------------------------------------------------------------------------
7. filter class
@Component
public class JwtFilter extends OncePerRequestFilter {
   @Autowired
   private JwtUserDetailsService userDetailsService;
   @Autowired
   private TokenManager tokenManager;
   @Override
   protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
      throws ServletException, IOException {
      
      String tokenHeader = request.getHeader("Authorization");
      String username = null;
      String token = null;
	  
      if (tokenHeader != null && tokenHeader.startsWith("Bearer ")) {
         token = tokenHeader.substring(7);
         try {
            username = tokenManager.getUsernameFromToken(token);
         } catch (IllegalArgumentException e) {
            System.out.println("Unable to get JWT Token");
         } catch (ExpiredJwtException e) {
            System.out.println("JWT Token has expired");
         }
      } else {
         System.out.println("Bearer String not found in token");
      }
      if (null != username && SecurityContextHolder.getContext().getAuthentication() == null) {
         UserDetails userDetails = userDetailsService.loadUserByUsername(username);
         if (tokenManager.validateJwtToken(token, userDetails)) {
            
			UsernamePasswordAuthenticationToken authenticationToken = new UsernamePasswordAuthenticationToken(
            userDetails, null, userDetails.getAuthorities());
           
			authenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
           
		   SecurityContextHolder.getContext().setAuthentication(authenticationToken);
         }
      }
      filterChain.doFilter(request, response);
   }
}

-------------------------------------------------------------------------------------------------------------------------------------
8. JwtAutheticationEntryPoint class
	@Component
	public class JwtAuthenticationEntryPoint implements AuthenticationEntryPoint,
	Serializable {
	   @Override
	   public void commence(HttpServletRequest request, HttpServletResponse
	   response,
	   AuthenticationException authException) throws
	   IOException, ServletException {
		  response.sendError(HttpServletResponse.SC_UNAUTHORIZED,
	   "Unauthorized");
		  }
	}

-------------------------------------------------------------------------------------------------------------------------------------

======================================================================================================
JWT (JSON Web Token) ko **aasaan shabdon** mein samjhein:

---

## 🔐 JWT Kya Hota Hai?

**JWT ek token hota hai jo user ke identity ko represent karta hai.** Jab user login karta hai, server uske liye ek JWT banata hai aur user ko de deta hai. Phir user jab bhi server se baat karta hai (jaise data maangta hai), to yeh token bhejta hai.

---

## 📦 JWT Ka Structure:

JWT 3 parts mein hota hai (dot se separate):

```
xxxxx.yyyyy.zzzzz
```

1. **Header** – Batata hai token kis type ka hai (JWT) aur kaunsa algorithm use hua (jaise HS256)
2. **Payload** – User ka data (jaise userId, username, roles etc.)
3. **Signature** – Verify karta hai ki token valid hai ya nahi (tampered to nahi)

---

## 🔄 Kaise Kaam Karta Hai?

1. ✅ User **login karta hai** (username + password)
2. ✅ Server check karta hai aur agar sahi hai to JWT banata hai
3. ✅ Token client ko diya jata hai
4. ✅ Har request me client **Authorization header me token bhejta hai**
5. ✅ Server token verify karta hai aur agar valid hai to request accept karta hai

---

## 📌 JWT Ka Use Kyu Karte Hain?

* 🔒 **Secure authentication** ke liye
* 🚪 **Sessionless login** (server ko user ka session ya state yaad nahi rakhna padta)
* ⚡ **Fast & scalable**, especially in microservices

---

## 🧠 Ek Example:

```json
Header:    { "alg": "HS256", "typ": "JWT" }
Payload:   { "userId": 101, "role": "admin" }
Signature: Encrypted using secret key
```

---

## 🎯 Important Points:

| Feature                  | Detail                           |
| ------------------------ | -------------------------------- |
| Stateless                | Server ko kuch yaad rakhna nahi  |
| Compact                  | Easily URL me bheja ja sakta hai |
| Secure (if signed)       | Modify nahi kiya ja sakta        |
| Not encrypted by default | Sirf sign hota hai, encrypt nahi |

---

Agar chaho to main Java ya Spring Boot me JWT ka example bhi de sakta hoon.


