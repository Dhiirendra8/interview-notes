Links : 
https://www.fullstack.cafe/interview-questions/reactive-programming
https://www.techgeeknext.com/spring-boot/spring-webflux-interview-questions
https://www.klusster.com/portfolios/adam-mathewz/contents/21920
https://www.knowledgefactory.net/2021/02/spring-webflux-interview-questions.html

1. Reactive Programming (WebFlux) : 
	- Reactive programming is programming with asynchronous data streams. Event buses or your typical click events are really an asynchronous event stream, 
		on which you can observe and do some side effects. Reactive is that idea on steroids. 
	- You are able to create data streams of anything, not just from click and hover events. 
	- Streams are cheap and ubiquitous, anything can be a stream: variables, user inputs, properties, caches, data structures, etc. 
		For example, imagine your Twitter feed would be a data stream in the same fashion that click events are. 
	- You can listen to that stream and react accordingly.
	
2. Advantages : 
	- avoid “callback hell”
	- a lot simpler to do async / threaded work
	- a lot of operators that simplify work
	- very simple to compose streams of data
	- complex threading becomes very easy
	- you end up with a more cleaner, readable code base
	- easy to implement back-pressure
	
3. Stream : A stream is a sequence of ongoing events ordered in time. 
	It can emit three different things: a value (of some type), an error, or a "completed" signal.
	
4. 
