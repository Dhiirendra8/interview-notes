In **Spring Boot**, an **Interceptor** is a powerful tool used to intercept HTTP requests and responses **before they reach the controller** or **after the controller has processed the request**. It’s typically used for:

* Logging
* Authentication/Authorization
* Request modification
* Performance monitoring

---

### ✅ 1. Basic Overview

Spring Interceptors are part of the **`org.springframework.web.servlet.HandlerInterceptor`** interface. You implement it and register it using a configuration class that extends `WebMvcConfigurer`.

---

### ✅ 2. Create a Custom Interceptor

```java
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.springframework.web.servlet.HandlerInterceptor;

public class CustomInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request,
                             HttpServletResponse response,
                             Object handler) throws Exception {
        System.out.println("Pre Handle method is Calling: " + request.getRequestURI());
        // Return false to block the request
        return true;
    }
    @Override
    public void postHandle(HttpServletRequest request,
                           HttpServletResponse response,
                           Object handler,
                           ModelAndView modelAndView) throws Exception {
        System.out.println("[postHandle] Controller has processed the request");

        // Example use case: add a custom header
        response.addHeader("X-Custom-Header", "InterceptorHeader");

        // Optional: Log view name if available
        if (modelAndView != null) {
            System.out.println("[postHandle] View name: " + modelAndView.getViewName());
        }
    }

    @Override
    public void afterCompletion(HttpServletRequest request,
                                HttpServletResponse response,
                                Object handler, Exception ex) throws Exception {
        System.out.println("Request and Response is completed");
    }
}
```

---

### ✅ 3. Register the Interceptor

You need to register your interceptor by creating a configuration class:

```java
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new CustomInterceptor())
                .addPathPatterns("/api/**") // apply only to these paths
                .excludePathPatterns("/api/public/**"); // exclude some paths
    }
}
```

---

### ✅ 4. Interceptor Lifecycle Methods

| Method            | Description                                                                                                 |
| ----------------- | ----------------------------------------------------------------------------------------------------------- |
| `preHandle`       | Called **before** the controller method executes. Return `false` to block the request.                      |
| `postHandle`      | Called **after** the controller method executes, but **before** the view is rendered. *(optional override)* |
| `afterCompletion` | Called **after** the complete request is finished, including view rendering. Used for cleanup/logging.      |

---

### ✅ 5. Example Use Cases

| Use Case             | Implement in                     |
| -------------------- | -------------------------------- |
| Logging URLs         | `preHandle` or `afterCompletion` |
| JWT Token Validation | `preHandle`                      |
| Execution time log   | `preHandle` + `afterCompletion`  |
| Custom headers       | `postHandle`                     |

---

### ✅ 6. Comparison with Filters

| Feature | Filter                          | Interceptor                 |
| ------- | ------------------------------- | --------------------------- |
| Part of | Servlet API                     | Spring MVC                  |
| Scope   | Servlet Request (all requests)  | Spring MVC requests         |
| Runs    | Before DispatcherServlet        | Before and after controller |
| Use for | Cross-cutting concerns globally | MVC-specific logic          |

---

