Spring MVC

1. A Spring MVC is a Java framework which is used to build web applications. It follows the Model-View-Controller design pattern. 
	It implements all the basic features of a core spring framework like Inversion of Control, Dependency Injection.

2. Inversion of Control
3. Dependency Injection

4. A Spring MVC provides an elegant solution to use MVC in spring framework by the help of DispatcherServlet. 
	Here, DispatcherServlet is a class that receives the incoming request and maps it to the right resource such as controllers, models, and views.
	

5. 
    A. Model - A model contains the data of the application. A data can be a single object or a collection of objects.
    B. Controller - A controller contains the business logic of an application. 
		Here, the @Controller annotation is used to mark the class as the controller.
    C. View - A view represents the provided information in a particular format. Generally, JSP+JSTL is used to create a view page.
		Although spring also supports other view technologies such as Apache Velocity, Thymeleaf and FreeMarker.
    D. Front Controller - In Spring Web MVC, the DispatcherServlet class works as the front controller.
		It is responsible to manage the flow of the Spring MVC application.

	
6. Flow of Spring Web-MVC
    1. All the incoming requests are intercepted by the DispatcherServlet that works as the front controller.
    2. The DispatcherServlet gets an entry of handler mapping and forwards the request to the controller.
    3. The controller returns an object of ModelAndView.
    4. The DispatcherServlet checks the entry of view resolver and invokes the specified view component.
	
	
	1. Request from client is received by frontcontroller
	2. Frontcontroller with the help of handler mapping passes that Request to corresponding controller
	3. At controller necessary methods will be implemented and response is generated
	4. now controller reverts that response to frontcontroller
	5. response is resolved as per views by viewresolver
	And reverted back to front controller
	Then further to client
	
7. Advantages
	
    Separate roles - The Spring MVC separates each role, where the model object, controller, command object, view resolver, DispatcherServlet, validator, etc. 
		can be fulfilled by a specialized object.
    Light-weight - It uses light-weight servlet container to develop and deploy your application.
    Powerful Configuration - It provides a robust configuration for both framework and application classes that includes easy referencing across contexts, 
		such as from web controllers to business objects and validators.
    Rapid development - The Spring MVC facilitates fast and parallel development.
    Reusable business code - Instead of creating new objects, it allows us to use the existing business objects.
    Easy to test - In Spring, generally we create JavaBeans classes that enable you to inject test data using the setter methods.
    Flexible Mapping - It provides the specific annotations that easily redirect the page.


	
	Spring Rest
	
1. @RequestMapping annotation is used to map the request URI to the handler method. We can also specify the HTTP method that should be 
		used by client application to invoke the rest method.

2. @ResponseBody annotation is used to map the response object in the response body. Once the response object is returned by the handler method, 
	MappingJackson2HttpMessageConverter kicks in and convert it to JSON response.

3. @PathVariable annotation is the easy way to extract the data from the rest URI and map it to the method argument.

4. @RequestBody annotation is used to map the request body JSON data into the Employee object, 
	again this is done by the MappingJackson2HttpMessageConverter mapping.


	#Spring JDBC Dependencies

1. First of all we need to include Spring JDBC and Database drivers in the maven project pom.xml file


--------------
#@RequestParam vs @QueryParam
-> Apart from these mentioned differences in framework, one major difference is @RequestParam will always expect a value to bind. Hence, if value is not passed, it will give error. This is not the case in @QueryParam

-> To explicitly give the option, use required = false while using @RequestParam

	

