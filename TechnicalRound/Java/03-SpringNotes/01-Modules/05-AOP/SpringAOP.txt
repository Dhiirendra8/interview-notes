Spring AOP (Aspect Oriented Programming)
-----------------------

What is AOP ?
	- AOP is programming paradigm that aims to increase the modularity
		by allowing the separation of cross-cutting concerns.
	- Process of applying services or external services as transaction management or
		logging to our application classes without modifying the code.
	- This service also called cross-cutting concern

Terminologies : 
1. Aspect : 
	- An aspect is a modularization of a concern that cuts across multiple classes.

2. Join Point : 
	- Join point is any point in your program such as method execution, exception handling, field access etc.
	- Spring supports method join point only.
	
3. Advice : 
	- Advice represents an action taken by an aspect at particular Join-Point
	
4. Pointcut :
	- It is an expression of AOP that matches Join-Point

===============================================================
### üîç AOP (Aspect-Oriented Programming) ‚Äì ‡§™‡•Ç‡§∞‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§π‡§ø‡§Ç‡§¶‡•Ä ‡§Æ‡•á‡§Ç

---

### ‚úÖ **AOP ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?**

**AOP (Aspect-Oriented Programming)** ‡§è‡§ï ‡§™‡•ç‡§∞‡•ã‡§ó‡•ç‡§∞‡§æ‡§Æ‡§ø‡§Ç‡§ó ‡§™‡•à‡§∞‡•á‡§°‡§æ‡§á‡§Æ ‡§π‡•à ‡§ú‡§ø‡§∏‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ê‡§∏‡•á code ‡§ï‡•ã separate (‡§Ö‡§≤‡§ó) ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à ‡§ú‡•ã ‡§¨‡§æ‡§∞-‡§¨‡§æ‡§∞ ‡§¶‡•ã‡§π‡§∞‡§æ‡§Ø‡§æ ‡§ú‡§æ‡§§‡§æ ‡§π‡•à, ‡§ú‡•à‡§∏‡•á:

* Logging
* Security check
* Transaction management
* Exception handling

‡§á‡§®‡•ç‡§π‡•á‡§Ç ‡§π‡§Æ **cross-cutting concerns** ‡§ï‡§π‡§§‡•á ‡§π‡•à‡§Ç ‚Äî ‡§Ø‡§æ‡§®‡•Ä ‡§ê‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ú‡•ã ‡§™‡•Ç‡§∞‡•á application ‡§Æ‡•á‡§Ç ‡§ï‡§à ‡§ú‡§ó‡§π‡•ã‡§Ç ‡§™‡§∞ ‡§≤‡§æ‡§ó‡•Ç ‡§π‡•ã‡§§‡•á ‡§π‡•à‡§Ç‡•§

---

### üîß AOP ‡§ï‡§æ ‡§Æ‡§ï‡§∏‡§¶:

> "Business logic ‡§î‡§∞ cross-cutting concerns ‡§ï‡•ã ‡§Ö‡§≤‡§ó ‡§ï‡§∞‡§®‡§æ ‡§§‡§æ‡§ï‡§ø ‡§ï‡•ã‡§° modular ‡§î‡§∞ maintainable ‡§∞‡§π‡•á‡•§"

---

## üèóÔ∏è AOP ‡§ï‡•á Core Concepts:

| Component      | ‡§µ‡§ø‡§µ‡§∞‡§£                                                            |
| -------------- | ---------------------------------------------------------------- |
| **Aspect**     | Cross-cutting logic ‡§ï‡§æ code block (‡§ú‡•à‡§∏‡•á logging aspect)          |
| **Advice**     | ‡§µ‡§π action ‡§ú‡•ã aspect run ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (‡§ú‡•à‡§∏‡•á method se pehle log karna) |
| **Join Point** | ‡§µ‡§π point ‡§ú‡§π‡§æ‡§Å advice apply ‡§π‡•ã‡§§‡•Ä ‡§π‡•à (‡§ú‡•à‡§∏‡•á koi method call)        |
| **Pointcut**   | ‡§µ‡§π condition ‡§ú‡•ã ‡§¨‡§§‡§æ‡§§‡•Ä ‡§π‡•à ‡§ï‡§ø advice ‡§ï‡§π‡§æ‡§Å apply ‡§π‡•ã‡§ó‡•Ä               |
| **Weaving**    | Aspect ‡§ï‡•ã actual code ‡§ï‡•á ‡§∏‡§æ‡§• ‡§ú‡•ã‡§°‡§º‡§®‡•á ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ                 |

---

### üß± Advice ‡§ï‡•á ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞:

| Advice ‡§™‡•ç‡§∞‡§ï‡§æ‡§∞     | ‡§ï‡§¨ execute ‡§π‡•ã‡§§‡§æ ‡§π‡•à                                                           |
| ----------------- | ---------------------------------------------------------------------------- |
| `@Before`         | Method call ‡§∏‡•á ‡§™‡§π‡§≤‡•á                                                          |
| `@After`          | Method ‡§ï‡•á complete ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶ (‡§ö‡§æ‡§π‡•á exception ‡§Ü‡§Ø‡•á ‡§Ø‡§æ ‡§®‡§π‡•Ä‡§Ç)                  |
| `@AfterReturning` | Method successfully return ‡§π‡•ã‡§®‡•á ‡§ï‡•á ‡§¨‡§æ‡§¶                                       |
| `@AfterThrowing`  | ‡§ú‡§¨ method ‡§Æ‡•á‡§Ç exception ‡§Ü‡§Ø‡•á                                                  |
| `@Around`         | Method call ‡§ï‡•ã completely control ‡§ï‡§∞‡§§‡§æ ‡§π‡•à (before ‡§î‡§∞ after ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•à) |

---

## ‚öôÔ∏è Spring AOP ‡§Æ‡•á‡§Ç ‡§ï‡•à‡§∏‡•á ‡§ï‡§æ‡§Æ ‡§ï‡§∞‡§§‡§æ ‡§π‡•à?

Spring AOP **proxy-based** ‡§π‡•ã‡§§‡§æ ‡§π‡•à:

* JDK Dynamic Proxy (‡§Ö‡§ó‡§∞ interface ‡§π‡•à)
* CGLIB Proxy (‡§Ö‡§ó‡§∞ ‡§ï‡•á‡§µ‡§≤ class ‡§π‡•à)

Spring Boot ‡§Æ‡•á‡§Ç AOP enable ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è:

```xml
<!-- pom.xml ‡§Æ‡•á‡§Ç dependency -->
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-aop</artifactId>
</dependency>
```

---

## üìÑ Example: Logging Aspect

```java
@Aspect
@Component
public class LoggingAspect {

    @Before("execution(* com.example.service.*.*(..))")
    public void logBefore(JoinPoint joinPoint) {
        System.out.println("Method call: " + joinPoint.getSignature().getName());
    }

    @AfterReturning(pointcut = "execution(* com.example.service.*.*(..))", returning = "result")
    public void logAfterReturning(JoinPoint joinPoint, Object result) {
        System.out.println("Returned from: " + joinPoint.getSignature().getName() + ", result: " + result);
    }
}
```

---

### üß† Pointcut Expression Explanation:

```java
execution(* com.example.service.*.*(..))
```

* `*` ‚Üí return type (kuch bhi ho)
* `com.example.service.*.*` ‚Üí service package ke sab classes ke sab methods
* `(..)` ‚Üí koi bhi arguments

---

## ‚úÖ AOP ‡§ï‡•á ‡§´‡§æ‡§Ø‡§¶‡•á:

* Code reusability (repeat hone wala code centralized hota hai)
* Better separation of concerns
* Maintainable and clean code
* Testing becomes easier

---

## ‚ö†Ô∏è AOP ‡§ï‡•á ‡§®‡•Å‡§ï‡§∏‡§æ‡§®:

* Code flow ‡§∏‡§Æ‡§ù‡§®‡§æ ‡§Æ‡•Å‡§∂‡•ç‡§ï‡§ø‡§≤ ‡§π‡•ã ‡§∏‡§ï‡§§‡§æ ‡§π‡•à (especially around advice)
* Overuse ‡§∏‡•á debugging complex ‡§π‡•ã ‡§ú‡§æ‡§§‡•Ä ‡§π‡•à

---

### üìå Real-life Use Cases:

* Logging and Auditing
* Authentication and Authorization
* Performance Monitoring
* Caching
* Transaction Management

---

	
