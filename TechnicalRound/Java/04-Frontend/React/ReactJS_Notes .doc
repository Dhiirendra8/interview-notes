React :

1. Open source JavaScript Library
2. Created and maintained by Facebook
3. Focuses on UI only
4. Component Based Architectre
5. React is declarative ---> with react dom
6. Prerequisites
	JavaScript --> 'this' keyword
			filter
			map
			reduce

	ES6 --> let & const
		arrow functions
		template literals		
		default parameters
		object literals
		rest & spread opretors
		destructuring assignment


========== Installation ==================
7. Node js.org  download
	IDE --> VS Code

8. Create React App --> With no configuration
	a) npx create-react-app hello-word
	b) npm install create-react-app -g
		create-react-app<project_name>
	to run --> cd to hello-world
			npm start

===========Folder Structure ============
9. package.json --> contains dependencies
   node_modules folder ---> all the dependencies are installed
   public folder --> index.html --> single page application
   src folder --> 
	index.js --> root dom node
	app.js --> responsible for html displayed on browser

10. Components : represents a part of UI & resuable
			a component can contains other components
	for eg : Root --> controls all components
		SideNav
		Header
		Footer
		Main Content

Types : 
	1. Stateless Functional Component
		JavaScript Functions

funclion welcome(props){
	return <h1> Hello, {props.name} </h1>;
}
		
	2. Stateful Class Component
		Class exdending Component Class
		Render method returning HTML

class Welcome exdends React.Component {
	render(){
		return <h1> Hello, {props.name} </h1>;
	}
}

11. JSX : JavaScript XML

12.Props : 
	passed to the component
	function parameters
	immutable
	props - Functional Component
	this.props - Class Component
13. State : 
	managed within the component
	variables declared in the function body
	can be changed
	useState Hook - Functional Component --> new feature in React
	this.state - Class Component

eg. Message.js in hello-world1 project

never modify the state directly -- react will not re-render the component -- use setState

14. Destructing props and state 
	ES6 Feature ->to unpack values from arrays
	code readability
	For functions
	1. in function parameter
	2. in function body --> const {var1, var2, ...} = props
	For Class
	3. In render() method --> const {var1, var2, ...} = this.props or this.state

15. Event Handling
	
16. Binding Event Handlers --> Note : Learn how "this" keyword works in JavaScript
	1. Binding in render method
	use "bind" keyword --> e.g.  onClick = {this.yourHandler.bind(this)}
	2. Arrow Function
	e.g. onClick = {() => this.yourHandler}

17. Methods as props

18. Conditional Rendering
	let flag
	1.IF-Else
		if(flag) { return (<div> ... </div>) }
			else { return (<div> ... </div>) }
	Note : if-else dont work inside the JSX
	
	2. let message
		if(flag) {message = <div> ... </div> }
			else { message = <div> ... </div> }
	return <div>{message}</div>

	3. Ternary
		return flag ? (<div> ...true..</div>) : (<div> ...false..</div>)

	4. Short Circuit (either something or nothing)
		return flag && <div>...true...</div>

19. List Rendering
	Note : Use map method of JS
		e.g : var arr = [1,4,9,16]
			const map1 = arr.map(x => x*2)
			Expected output: Array [2,8,18,32]
	
	
	In React we can transforming list into JSX
		e.g. function NameList() {
				const names = ['Bruce', 'clark', 'Diana']
				const nameList = names.map(name => <h2>{name}</h2>)
				return ()
				<div>
				{
					{nameList}
				}
				</div>
				)
				
		}

		
20. Lists and Keys
		Warning : Each child in an array or iterator should have a unique "key" prop
		
		e.g : const personList = persons.map(person => <Person key={person.id} person={person} />)
		
		Keys:
		1. A "key" is a special string attribute you need to include when creating lists of elements.
		2. Keys give the elements a stable identity
		3.Keys help React identify which items have changed, are added, or are removed.
		4. Help in efficient update of the user interface.
		
		
21. Index as Key Anti-pattern
		- Avoid to use index as key
		
		function NameList() {
				const names = ['Bruce', 'clark', 'Diana']
				const nameList = names.map((name, index) => <h2 key={index}>{name}</h2>)
				return ()
				<div>
				{
					{nameList}
				}
				</div>
				)
				
		}
		
	https://codepen.io/gopinav/pen/gQpepq
	
22.  Styling and CSS Basics
	1. CSS stylesheets
		
	
	2. Inline styling
	3. CSS Modules
	4. CSS in JS Library

23. Form Handling Basics
		Controlled Components :
			constructor
			onChange handler --> handler method --> set state
			onSubmit handler --> event.preventDefault()
			
24. Component Lifecycle Methods
		1. Mounting
				When an instance of a component is being created and inserted into the DOM	
				Methods : 
					1. constructor
					2. static getDerivedStateFromProps
					3. render
					4. componentDidMount
			
		2. Updating
				When a component is being re-rendered as a result of changes to either its props or state
				Methods : 					
					1. static getDerivedStateFromProps
					2. shouldcomponentUpdate
					3. render
					4. getSnapshotBeforeUpdate
					5. componentDidUpdate
				
		3. Unmounting
				When a component is being removed from the DOM
				Methods :
					1. componentWillUnmount
				
		4. Error Handling
				When there is an error during rendering, in a lifecycle method, or in the constructor of any child component
				
				Methods : 
				1. static getDerivedStateFromError
				2. componentDidCatch
				
25. Mounting Lifecycle Methods with order of execution

	1. constructor(props)
		1. A Special function that will get called whenever a new component is created
		B. Initializing state
		2. Binding the event handlers
		4. Do not cause side effects EX: Http requests
		5. super(props)
		6. Directly overwrite this.state
		
	2. static getDerivedStateFromProps(props, state)
		1. When the state of the component depends on changes in props over time
		2. Set the state		
		3. Do not cause side effects. Ex. Http requests
		4. return new state or null
		
	3. render()
		1. only required method
		2. Read props & state and return JSX
		3. Do not change state or interact with DOM or make ajax calls.
		4. children components lifecycle methods are also executed.
		
	4. componentDidMount()
		1. Invoked immediately after a component and all its children components have been rendered to the DOM
		2. Cause side effects. Ex: Interact with DOM or perform any ajax calls to load data.
		
26. Updating Lifecycle Methods
		1. static getDerivedStateFromProps(props, state)
			1. Methods is called every time a component is re-rendered
			2. Set the state
			3. Do not cause side effects. Ex: Http requests
		
		2. shouldComponentUpdate(nextProps, nextState)
			1.Dictates if the component should re-render or not
			2. Performance optimization
			3. Do not cause side effects. Ex: Http requests
			        Calling the setState method
		3. render() 
			1. only required method
			2. Read props & state and return JSX
			3. Do not change state or interact with DOM or make ajax calls.
			4. children components lifecycle methods are also executed.
		4. getSnapshotBeforeUpdate(prevProps, prevState)
			1. Called right before the changes from the virtual DOM are to be reflected in the DOM
			2. Capture some information from the DOM'
			3. Methods will either return null or return a value.
			4. Returned value will be passed as the third parameter to next method i.e. componentDidUpdate
		5. componentDidUpdate(prevProps, prevState, snapshot)
			1. Called after the render is finished in the re-render cycles
			2. Cause side effects
			
27. Unmounting Phase Method
		1. componentWillUnmount()
			1. Method is invoked immediately before a component is unmounted and destroyed.
			2. Cancelling any network requests, removing event handlers, cancelling any subscriptions and also invalidatind timers.
			3. Do not call the setState method.
			
28. Error Handling Phase Methods
		# When there is an error either during rendering, in a lifecycle method, or in the constructor of any child component.
		1. static getDerivedStateFromError(error)
				The static method getDerivedStateFromError method is used to render a fallback UI after an error is thrown
		2. componentDidCatch(error,info)
				the componentDidCatch method is used to log the error information

		
29. Fragments
		1. <React.Fragment>
				<h1> ... </h1>
				<p> ... </p>
		</React.Fragment>
		2. key attribute can only pass into React.Fragment
		4. <> .... </> -- can not pass key attribute 
		
30. Pure Components

31. Memo

33. Refs

34. Refs with class components

35. Forwarding

36. Portal

37. Error Boundary

		# A class component that implements either one or both of the lifecycle methods getDerivedStateFromError or componentDidCatch becomes an error boundary
		
		# The static method getDerivedStateFromError method is used to render a fallback UI after an error is thrown and the componentDidCatch method is used to log the error information.
		
		# Error boundaries are React components that catch JavaScript error in their child component tree, log those errors, and display a fall-back UI.
		
		# A class component becomes an Error Boundary by defining either or both of getDerivedStateFromError and componentDidCatch lifecycle methods.
		
		# The placement of the Error Boundary also matters as it controls if the entire app should have the fall-back UI or just the component causing the problem.
		
		# Provide a way to gracefully handle error in application code.
		

38. Higher Order Components

39. Render Props

	

		
		
				
		
		
				
	
			
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

	
	


	
	
	

	
	
 