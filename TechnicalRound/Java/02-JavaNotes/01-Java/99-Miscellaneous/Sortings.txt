
-----------------------------------------------------------------------------------------------------------------------
#Quick Sort : 
-> The array of elements is divided into parts repeatedly until it is not possible to divide it further.
-> It is also known as “partition exchange sort”.
-> It uses a key element (pivot) for partitioning the elements.
-> One left partition contains all those elements that are smaller than the pivot 
	and one right partition contains all those elements which are greater than the key element (pivot).
		
		
-----------------------------------------------------------------------------------------------------------------------
#Merge Sort :
-> The elements are split into two sub-arrays (n/2) again and again until only one element is left.
-> Merge sort uses additional storage for sorting the auxiliary array.
-> Merge sort uses three arrays where two are used for storing each half, and the third external one is used to 
	store the final sorted list by merging other two and each array is then sorted recursively.
-> At last, the all sub arrays are merged to make it 'n' element size of the array.
	
	
-----------------------------------------------------------------------------------------------------------------------
1. Quick sort is preferred for arrays.whereas Merge sort is preferred for linked lists.

2. Merge sort is more efficient and works faster than quick sort in case of larger array size or datasets.
whereas Quick sort is more efficient and works faster than merge sort in case of smaller array size or datasets.

3. Merge sort is not in place because it requires additional memory space to store the auxiliary arrays.
whereas The quick sort is in place as it doesn't require any additional storage.

4. Merge sort can work well on any type of data sets irrespective of its size (either large or small).
whereas The quick sort cannot work well with large datasets.

5. The worst case complexity of quick sort is O(n2) as there is need of lot of comparisons in the worst condition.
whereas In merge sort, worst case and average case has same complexities O(n log n).

6. In the merge sort, the array is parted into just 2 halves (i.e. n/2).
whereas In case of quick sort, the array is parted into any ratio.There is no compulsion of dividing the array of elements into equal parts in quick sort.
-----------------------------------------------------------------------------------------------------------------------
-----------------------------------------------------------------------------------------------------------------------


public class QuickSort {

    // Method to perform quicksort
    public static void quickSort(int[] arr, int low, int high) {
        if (low < high) {
            // Partition the array and get the pivot index
            int pivotIndex = partition(arr, low, high);

            // Recursively sort elements before and after partition
            quickSort(arr, low, pivotIndex - 1);
            quickSort(arr, pivotIndex + 1, high);
        }
    }

    // Partition method (Lomuto partition scheme)
    private static int partition(int[] arr, int low, int high) {
        int pivot = arr[high]; // last element as pivot
        int i = low - 1; // index of smaller element

        for (int j = low; j < high; j++) {
            // If current element is less than or equal to pivot
            if (arr[j] <= pivot) {
                i++;

                // Swap arr[i] and arr[j]
                swap(arr, i, j);
            }
        }

        // Swap pivot with the element at i+1
        swap(arr, i + 1, high);
        return i + 1;
    }

    // Utility method to swap elements
    private static void swap(int[] arr, int i, int j) {
        int temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp;
    }

    // Driver method
    public static void main(String[] args) {
        int[] data = { 10, 7, 8, 9, 1, 5 };
        System.out.println("Before sorting:");
        printArray(data);

        quickSort(data, 0, data.length - 1);

        System.out.println("After sorting:");
        printArray(data);
    }

    // Utility method to print array
    private static void printArray(int[] arr) {
        for (int val : arr) {
            System.out.print(val + " ");
        }
        System.out.println();
    }
}
==================================================================================================

Before sorting:
12 11 13 5 6 7 
After sorting:
5 6 7 11 12 13
