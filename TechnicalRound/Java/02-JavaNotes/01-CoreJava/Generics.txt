**Generics in Java** allow you to write code that works with **any data type** while maintaining **type safety** at compile-time.

---

### 🔹 What is Generics?

Generics enable you to define **classes, interfaces, and methods** with a **placeholder for types**, so you can specify the actual type when you use them.

For example:

```java
List<String> list = new ArrayList<>();
```

Here, `String` is the generic type passed to `List`. It ensures only `String` objects can be added.

---

### 🔹 Why Use Generics?

✅ **Type Safety** – Catches type errors at compile time
✅ **Code Reusability** – Same code works with different types
✅ **No Type Casting** – Reduces the need for explicit casting
✅ **Improved Readability and Maintainability**

---

### 🔹 Generic Class Example:

```java
class Box<T> {
    private T value;

    public void set(T value) {
        this.value = value;
    }

    public T get() {
        return value;
    }
}
```

Usage:

```java
Box<String> stringBox = new Box<>();
stringBox.set("Hello");
System.out.println(stringBox.get());

Box<Integer> intBox = new Box<>();
intBox.set(123);
System.out.println(intBox.get());
```

---

### 🔹 Generic Method Example:

```java
public class Utils {
    public static <T> void printArray(T[] array) {
        for (T element : array) {
            System.out.println(element);
        }
    }
}
```

Usage:

```java
Utils.printArray(new Integer[]{1, 2, 3});
Utils.printArray(new String[]{"A", "B", "C"});
```

---

### 🔹 Bounded Generics

You can restrict generics using bounds:

```java
class NumberBox<T extends Number> {
    T num;
}
```

This means `T` must be a subclass of `Number` (like `Integer`, `Double`, etc).

---

### 🔹 Wildcards (`?`)

* `<?>` – Unknown type
* `<? extends T>` – Any subtype of T
* `<? super T>` – Any supertype of T

Example:

```java
List<? extends Number> list;  // Can be List<Integer>, List<Double>, etc.
```

---

### Summary Table:

| Concept        | Example                  | Use                                 |
| -------------- | ------------------------ | ----------------------------------- |
| Generic Class  | `class Box<T>`           | Class with type placeholder         |
| Generic Method | `<T> void print(T val)`  | Method with generic type            |
| Bounded Type   | `<T extends Number>`     | Restrict type to Number or subclass |
| Wildcard       | `List<? extends Number>` | Flexibility in API input            |

---
==================================================================================================
Yes, you **can use generics with `enum` types** in Java, but **you cannot create a generic `enum` itself**.

---

### ✅ What You *Can* Do:

You can use an enum **as a type parameter** in generic classes or methods.

#### 🔹 Example: Generic class that works with any enum

```java
public class EnumPrinter<T extends Enum<T>> {
    public void printEnumValues(Class<T> enumType) {
        for (T val : enumType.getEnumConstants()) {
            System.out.println(val);
        }
    }
}
```

#### 🔹 Usage:

```java
enum Color {
    RED, GREEN, BLUE
}

public class Main {
    public static void main(String[] args) {
        EnumPrinter<Color> printer = new EnumPrinter<>();
        printer.printEnumValues(Color.class);
    }
}
```

---

### ❌ What You *Cannot* Do:

You **cannot declare an enum itself as generic**, like this:

```java
// ❌ This is illegal in Java
public enum MyEnum<T> {
    ONE, TWO;
}
```

> Enums in Java are meant to be constant sets and their structure must be fixed; hence, generics are not allowed on enum definitions.

---

### ✅ Real Use Case: Enum with Generic Utility Method

```java
public class EnumUtil {
    public static <E extends Enum<E>> E fromString(Class<E> enumType, String name) {
        return Enum.valueOf(enumType, name.toUpperCase());
    }
}

// Usage
Color color = EnumUtil.fromString(Color.class, "red");
System.out.println(color); // Output: RED
```

---

### Summary:

| Feature                                 | Allowed? | Example                           |
| --------------------------------------- | -------- | --------------------------------- |
| Use `enum` in a generic class or method | ✅        | `<T extends Enum<T>>`             |
| Make an `enum` declaration generic      | ❌        | `enum MyEnum<T> {}` → Not allowed |

Let me know if you want examples like storing enum values in a map or using them in generic repositories.
